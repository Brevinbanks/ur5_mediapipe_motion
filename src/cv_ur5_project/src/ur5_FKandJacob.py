# This file will calculate the forward kinematics from the base_link of the ur5 to the tool0 frame at the end effector
# The jacobian is also provided. It's not pretty, but it works

import numpy as np
import sympy as sp
def ForwardKinematics(q):
           
        tz = np.array([[1,0,0,0],
                         [0,1,0,0],
                         [0,0,1,0.0892],
                         [0,0,0,1]])  
      

        fk =np.array([[ -(np.sin(q[0])*np.sin(q[4]) + np.cos(q[0])*np.cos(q[4])*np.cos(q[1] + q[2] + q[3]))*np.cos(q[5]) + np.sin(q[5])*np.sin(q[1] + q[2] + q[3])*np.cos(q[0])
  ,(np.sin(q[0])*np.sin(q[4]) + np.cos(q[0])*np.cos(q[4])*np.cos(q[1] + q[2] + q[3]))*np.sin(q[5]) + np.sin(q[1] + q[2] + q[3])*np.cos(q[0])*np.cos(q[5])
  ,-np.sin(q[0])*np.cos(q[4]) + np.sin(q[4])*np.cos(q[0])*np.cos(q[1] + q[2] + q[3])
  ,-823*np.sin(q[0])*np.cos(q[4])/10000 - 2183*np.sin(q[0])/20000 - 1569*np.sin(q[1])*np.sin(q[2])*np.cos(q[0])/4000 - 1893*np.sin(q[3])*np.cos(q[0])*np.cos(q[1] + q[2])/20000 + 823*np.sin(q[4])*np.cos(q[0])*np.cos(q[1] + q[2] + q[3])/10000 - 1893*np.sin(q[1] + q[2])*np.cos(q[0])*np.cos(q[3])/20000 + 1569*np.cos(q[0])*np.cos(q[1])*np.cos(q[2])/4000 + 17*np.cos(q[0])*np.cos(q[1])/40]
 ,[ (-np.sin(q[0])*np.cos(q[4])*np.cos(q[1] + q[2] + q[3]) + np.sin(q[4])*np.cos(q[0]))*np.cos(q[5]) + np.sin(q[0])*np.sin(q[5])*np.sin(q[1] + q[2] + q[3])
  ,-(-np.sin(q[0])*np.cos(q[4])*np.cos(q[1] + q[2] + q[3]) + np.sin(q[4])*np.cos(q[0]))*np.sin(q[5]) + np.sin(q[0])*np.sin(q[1] + q[2] + q[3])*np.cos(q[5])
  ,np.sin(q[0])*np.sin(q[4])*np.cos(q[1] + q[2] + q[3]) + np.cos(q[0])*np.cos(q[4])
  ,-1569*np.sin(q[0])*np.sin(q[1])*np.sin(q[2])/4000 - 1893*np.sin(q[0])*np.sin(q[3])*np.cos(q[1] + q[2])/20000 + 823*np.sin(q[0])*np.sin(q[4])*np.cos(q[1] + q[2] + q[3])/10000 - 1893*np.sin(q[0])*np.sin(q[1] + q[2])*np.cos(q[3])/20000 + 1569*np.sin(q[0])*np.cos(q[1])*np.cos(q[2])/4000 + 17*np.sin(q[0])*np.cos(q[1])/40 + 823*np.cos(q[0])*np.cos(q[4])/10000 + 2183*np.cos(q[0])/20000]
 ,[np.sin(q[5])*np.cos(q[1] + q[2] + q[3]) + np.sin(q[1] + q[2] + q[3])*np.cos(q[4])*np.cos(q[5])
  ,-np.sin(q[5])*np.sin(q[1] + q[2] + q[3])*np.cos(q[4]) + np.cos(q[5])*np.cos(q[1] + q[2] + q[3])
  ,-np.sin(q[4])*np.sin(q[1] + q[2] + q[3])
  ,-(823*np.sin(q[3])*np.cos(q[1] + q[2])/10000 + 823*np.sin(q[1] + q[2])*np.cos(q[3])/10000)*np.sin(q[4]) - 17*np.sin(q[1])/40 + 1893*np.sin(q[3])*np.sin(q[1] + q[2])/20000 - 1569*np.sin(q[1] + q[2])/4000 - 1893*np.cos(q[3])*np.cos(q[1] + q[2])/20000 + 0.0892]
 ,[0, 0, 0, 1]])
        return fk

def Jacobian(q):
          
    J = np.array([[                                                                                                                                                                                                                                                                      0, -(223*np.cos(q[0]))/2500, (np.cos(q[0])*(2125*np.sin(q[1]) - 446))/5000, (np.cos(q[0])*(7845*np.sin(q[1] + q[2]) + 8500*np.sin(q[1]) - 1784))/20000,                                                                                                                                                                                                                                                              (17*np.sin(q[2] - q[0] + q[3]))/80 - (17*np.sin(q[0] + q[2] + q[3]))/80 - (1569*np.sin(q[0] - q[3]))/8000 - (3967*np.cos(q[0] + q[1] + q[2] + q[3]))/40000 - (1569*np.sin(q[0] + q[3]))/8000 - (399*np.cos(q[1] - q[0] + q[2] + q[3]))/40000, (1893*np.sin(q[0])*np.sin(q[4]))/20000 - (223*np.cos(q[0])*np.cos(q[4]))/2500 - (1569*np.sin(q[0])*np.sin(q[3])*np.sin(q[4]))/4000 + (17*np.cos(q[0])*np.cos(q[4])*np.sin(q[1]))/40 + (1569*np.cos(q[0])*np.cos(q[1])*np.cos(q[4])*np.sin(q[2]))/4000 + (1569*np.cos(q[0])*np.cos(q[2])*np.cos(q[4])*np.sin(q[1]))/4000 - (17*np.cos(q[2])*np.sin(q[0])*np.sin(q[3])*np.sin(q[4]))/40 - (17*np.cos(q[3])*np.sin(q[0])*np.sin(q[2])*np.sin(q[4]))/40 + (1893*np.cos(q[0])*np.cos(q[1])*np.cos(q[2])*np.cos(q[3])*np.cos(q[4]))/20000 - (2183*np.cos(q[0])*np.cos(q[1])*np.cos(q[2])*np.sin(q[3])*np.sin(q[4]))/20000 - (2183*np.cos(q[0])*np.cos(q[1])*np.cos(q[3])*np.sin(q[2])*np.sin(q[4]))/20000 - (1893*np.cos(q[0])*np.cos(q[1])*np.cos(q[4])*np.sin(q[2])*np.sin(q[3]))/20000 - (2183*np.cos(q[0])*np.cos(q[2])*np.cos(q[3])*np.sin(q[1])*np.sin(q[4]))/20000 - (1893*np.cos(q[0])*np.cos(q[2])*np.cos(q[4])*np.sin(q[1])*np.sin(q[3]))/20000 - (1893*np.cos(q[0])*np.cos(q[3])*np.cos(q[4])*np.sin(q[1])*np.sin(q[2]))/20000 - (223*np.cos(q[1])*np.cos(q[2])*np.cos(q[3])*np.sin(q[0])*np.sin(q[4]))/2500 + (2183*np.cos(q[0])*np.sin(q[1])*np.sin(q[2])*np.sin(q[3])*np.sin(q[4]))/20000 + (223*np.cos(q[1])*np.sin(q[0])*np.sin(q[2])*np.sin(q[3])*np.sin(q[4]))/2500 + (223*np.cos(q[2])*np.sin(q[0])*np.sin(q[1])*np.sin(q[3])*np.sin(q[4]))/2500 + (223*np.cos(q[3])*np.sin(q[0])*np.sin(q[1])*np.sin(q[2])*np.sin(q[4]))/2500],
      [                                                                                                                                                                                                                                                                      0, -(223*np.sin(q[0]))/2500, (np.sin(q[0])*(2125*np.sin(q[1]) - 446))/5000, (np.sin(q[0])*(7845*np.sin(q[1] + q[2]) + 8500*np.sin(q[1]) - 1784))/20000,                                                                                                                                                                                                                                                              (1569*np.cos(q[0] - q[3]))/8000 + (17*np.cos(q[0] + q[2] + q[3]))/80 + (17*np.cos(q[2] - q[0] + q[3]))/80 - (3967*np.sin(q[0] + q[1] + q[2] + q[3]))/40000 + (1569*np.cos(q[0] + q[3]))/8000 + (399*np.sin(q[1] - q[0] + q[2] + q[3]))/40000, (17*np.cos(q[4])*np.sin(q[0])*np.sin(q[1]))/40 - (223*np.cos(q[4])*np.sin(q[0]))/2500 - (1893*np.cos(q[0])*np.sin(q[4]))/20000 + (1569*np.cos(q[0])*np.sin(q[3])*np.sin(q[4]))/4000 + (1569*np.cos(q[1])*np.cos(q[4])*np.sin(q[0])*np.sin(q[2]))/4000 + (1569*np.cos(q[2])*np.cos(q[4])*np.sin(q[0])*np.sin(q[1]))/4000 + (17*np.cos(q[0])*np.cos(q[2])*np.sin(q[3])*np.sin(q[4]))/40 + (17*np.cos(q[0])*np.cos(q[3])*np.sin(q[2])*np.sin(q[4]))/40 + (223*np.cos(q[0])*np.cos(q[1])*np.cos(q[2])*np.cos(q[3])*np.sin(q[4]))/2500 + (1893*np.cos(q[1])*np.cos(q[2])*np.cos(q[3])*np.cos(q[4])*np.sin(q[0]))/20000 - (223*np.cos(q[0])*np.cos(q[1])*np.sin(q[2])*np.sin(q[3])*np.sin(q[4]))/2500 - (223*np.cos(q[0])*np.cos(q[2])*np.sin(q[1])*np.sin(q[3])*np.sin(q[4]))/2500 - (223*np.cos(q[0])*np.cos(q[3])*np.sin(q[1])*np.sin(q[2])*np.sin(q[4]))/2500 - (2183*np.cos(q[1])*np.cos(q[2])*np.sin(q[0])*np.sin(q[3])*np.sin(q[4]))/20000 - (2183*np.cos(q[1])*np.cos(q[3])*np.sin(q[0])*np.sin(q[2])*np.sin(q[4]))/20000 - (1893*np.cos(q[1])*np.cos(q[4])*np.sin(q[0])*np.sin(q[2])*np.sin(q[3]))/20000 - (2183*np.cos(q[2])*np.cos(q[3])*np.sin(q[0])*np.sin(q[1])*np.sin(q[4]))/20000 - (1893*np.cos(q[2])*np.cos(q[4])*np.sin(q[0])*np.sin(q[1])*np.sin(q[3]))/20000 - (1893*np.cos(q[3])*np.cos(q[4])*np.sin(q[0])*np.sin(q[1])*np.sin(q[2]))/20000 + (2183*np.sin(q[0])*np.sin(q[1])*np.sin(q[2])*np.sin(q[3])*np.sin(q[4]))/20000],
      [                                                                                                                                                                                                                                                                      0,                   0,                     (17*np.cos(q[1]))/40,                (1569*np.cos(q[1] + q[2]))/4000 + (17*np.cos(q[1]))/40,                                                                                                                                                                                                                                                                                                                                                                                                                      (2183*np.sin(q[1] + q[2] + qnp.cos(q[1] - q[4]))/80 + (1569*np.cos(q[1] + q[2] + q[4]))/8000 + (1569*np.cos(q[1] + q[2] - q[4]))/8000 - (1019*np.sin(q[1] + q[2] + q[3] + q[4]))/10000 + (17*np.cos(q[1] + q[4]))/80 + (29*np.sin(q[1] + q[2] + q[3] - q[4]))/4000],
      [                                                                                                                                                                                                                                                                      0,            -np.sin(q[0]),                            -np.sin(q[0]),                                                  -np.sin(q[0]),                                                                                                                                                                                                                                                                                                                                                                                                                          -np.sin(q[1] + q[2] + q[3])*np.cos(qnp.cos(q[1] + q[2] + q[3])*np.cos(q[0])*np.sin(q[4]) - np.cos(q[4])*np.sin(q[0])],
      [                                                                                                                                                                                                                                                                      0,             np.cos(q[0]),                             np.cos(q[0]),                                                   np.cos(q[0]),                                                                                                                                                                                                                                                                                                                                                                                                                          -np.sin(q[1] + q[2] + q[3])*np.sin(qnp.cos(q[0])*np.cos(q[4]) + np.cos(q[1] + q[2] + q[3])*np.sin(q[0])*np.sin(q[4])],
      [1,                   0,                                   0,                                                         0, (np.cos(q[0])*np.sin(q[4]) - np.cos(q[1] + q[2] + q[3])*np.cos(q[4])*np.sin(q[0]))*(np.cos(q[4])*np.sin(q[0]) - np.cos(q[1] + q[2] + q[3])*np.cos(q[0])*np.sin(q[4])) - np.cos(q[5])*(np.cos(q[5])*(np.sin(q[0])*np.sin(q[4]) + np.cos(q[1] + q[2] + q[3])*np.cos(q[0])*np.cos(q[4])) - np.sin(q[1] + q[2] + q[3])*np.cos(q[0])*np.sin(q[5]))*(np.cos(q[0])*np.cos(q[4]) + np.cos(q[1] + q[2] + q[3])*np.sin(q[0])*np.sin(q[4])) - np.sin(q[5])*(np.sin(q[5])*(np.sin(q[0])*np.sin(q[4]) + np.cos(q[1] + q[2] + q[3])*np.cos(q[0])*np.cos(q[4])) + np.sin(q[1] + q[2] + q[3])*np.cos(q[0])*np.cos(q[5]))*(np.cos(q[0])*np.cos(q[4]) + np.cos(q[1] + q[2] + q[3])*np.sin(q[0])*np.sin(qnp.sin(q[1] + q[2] + q[3])*np.sin(q[4])]])
 
    return J

def ForwardKinematicsSym(q):

        fk =  sp.Matrix([[  sp.cos(q[5])*(sp.sin(q[0])*sp.sin(q[4]) + sp.cos(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.cos(q[4])) - sp.sin(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.sin(q[5]), - sp.sin(q[5])*(sp.sin(q[0])*sp.sin(q[4]) + sp.cos(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.cos(q[4])) - sp.sin(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.cos(q[5]),   sp.cos(q[4])*sp.sin(q[0]) - sp.cos(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.sin(q[4]), (2183*sp.sin(q[0]))/20000 - (17*sp.cos(q[0])*sp.cos(q[1]))/40 + (823*sp.cos(q[4])*sp.sin(q[0]))/10000 - (823*sp.cos(q[1] + q[2] + q[3])*sp.cos(q[0])*sp.sin(q[4]))/10000 + (1893*sp.cos(q[1] + q[2])*sp.cos(q[0])*sp.sin(q[3]))/20000 + (1893*sp.sin(q[1] + q[2])*sp.cos(q[0])*sp.cos(q[3]))/20000 - (1569*sp.cos(q[0])*sp.cos(q[1])*sp.cos(q[2]))/4000 + (1569*sp.cos(q[0])*sp.sin(q[1])*sp.sin(q[2]))/4000],
                    [- sp.cos(q[5])*(sp.cos(q[0])*sp.sin(q[4]) - sp.cos(q[1] + q[2] + q[3])*sp.cos(q[4])*sp.sin(q[0])) - sp.sin(q[1] + q[2] + q[3])*sp.sin(q[0])*sp.sin(q[5]),   sp.sin(q[5])*(sp.cos(q[0])*sp.sin(q[4]) - sp.cos(q[1] + q[2] + q[3])*sp.cos(q[4])*sp.sin(q[0])) - sp.sin(q[1] + q[2] + q[3])*sp.cos(q[5])*sp.sin(q[0]), - sp.cos(q[0])*sp.cos(q[4]) - sp.cos(q[1] + q[2] + q[3])*sp.sin(q[0])*sp.sin(q[4]), (1569*sp.sin(q[0])*sp.sin(q[1])*sp.sin(q[2]))/4000 - (823*sp.cos(q[0])*sp.cos(q[4]))/10000 - (17*sp.cos(q[1])*sp.sin(q[0]))/40 - (2183*sp.cos(q[0]))/20000 - (823*sp.cos(q[1] + q[2] + q[3])*sp.sin(q[0])*sp.sin(q[4]))/10000 + (1893*sp.cos(q[1] + q[2])*sp.sin(q[0])*sp.sin(q[3]))/20000 + (1893*sp.sin(q[1] + q[2])*sp.cos(q[3])*sp.sin(q[0]))/20000 - (1569*sp.cos(q[1])*sp.cos(q[2])*sp.sin(q[0]))/4000],
                    [sp.cos(q[1] + q[2] + q[3])*sp.sin(q[5]) + sp.sin(q[1] + q[2] + q[3])*sp.cos(q[4])*sp.cos(q[5]),                                       sp.cos(q[1] + q[2] + q[3])*sp.cos(q[5]) - sp.sin(q[1] + q[2] + q[3])*sp.cos(q[4])*sp.sin(q[5]),                            -sp.sin(q[1] + q[2] + q[3])*sp.sin(q[4]),                                                          (1893*sp.sin(q[1] + q[2])*sp.sin(q[3]))/20000 - (17*sp.sin(q[1]))/40 - sp.sin(q[4])*((823*sp.cos(q[1] + q[2])*sp.sin(q[3]))/10000 + (823*sp.sin(q[1] + q[2])*sp.cos(q[3]))/10000) - (1893*sp.cos(q[1] + q[2])*sp.cos(q[3]))/20000 - (1569*sp.sin(q[1] + q[2]))/4000 + 6424583026827617/72057594037927936],
                    [0,                                                                                                   0,                                                     0,                                                                                                                                                                                                                                                                                                1]])
        rotz = sp.Matrix([[sp.cos(sp.pi),-sp.sin(sp.pi),0,0],
                         [sp.sin(sp.pi),sp.cos(sp.pi),0,0],
                         [0,0,1,0],
                         [0,0,0,1]])   
        tz = sp.Matrix([[1,0,0,0],
                         [0,1,0,0],
                         [0,0,1,0.0892],
                         [0,0,0,1]])  
        return np.dot(rotz,np.dot(tz,fk))
if __name__=="__main__":
      q = []
      for k in range(6):
            q.append(sp.symbols('q{}'.format(k)))
      E = ForwardKinematicsSym(q)
      print(E)