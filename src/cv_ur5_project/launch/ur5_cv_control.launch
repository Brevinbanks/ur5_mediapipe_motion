<?xml version="1.0"?>
<launch>
  <!--
  Main simulation launch file for the cv_ur5_project.
  This file sets up the Gazebo environment, loads the UR5 robot and associated controllers,
  spawns a table, cube, and a viewer camera, and launches visualization tools (RViz, RQT).
  It handles URDF uploads, controller spawning, static transforms, and custom state publishers
  for full robot simulation with gripper and visual feedback.

  NOTE: Assumes all dependencies and paths are correct for Gazebo, RViz, and controller configuration.
  -->

  <arg name="limited" default="true"/>
  <arg name="paused" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="debug" default="false" />
  <arg name="sim" default="true" />

  <!-- Include the empty_world.launch file -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!-- Override the world_name argument with your custom world file path -->
    <arg name="world_name" value="$(find cv_ur5_project)/worlds/empty.world"/>
    <!-- Pass other arguments as needed -->
    <arg name="paused" value="$(arg paused)"/>
    <arg name="gui" value="$(arg gui)"/>
  </include>

  <!-- spwan ur5 -->
  <!-- send robot urdf to param server -->
  <include file="$(find cv_ur5_project)/launch/ur5_upload.launch">
    <arg name="limited" value="$(arg limited)"/>
  </include>

  <!-- push robot_description to factory and spawn robot in gazebo -->
  <node name="spawn_gazebo_model" pkg="gazebo_ros" type="spawn_model" args="-urdf -param robot_description -model robot -z 1.1225 -x 1.4 -y 0.7" respawn="false" output="screen" />
  
  <!-- Load additional controller utilities -->
  <include file="$(find cv_ur5_project)/launch/controller_utils.launch"/>

  <!-- Load and spawn arm controller -->
  <rosparam file="$(find cv_ur5_project)/config/arm_controller_ur5.yaml" command="load"/>
  <node name="arm_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn arm_controller" respawn="false" output="screen"/>

  <!-- Remap trajectory topic to match arm controller -->
  <remap if="$(arg sim)" from="/follow_joint_trajectory" to="/arm_controller/follow_joint_trajectory"/>

 <!-- Load extra gazebo controller parameters -->
  <rosparam file="$(find cv_ur5_project)/config/gazebo_controller.yaml" command="load" />

  <!-- spawn the table in gazebo -->
  <node name="spawn_table" pkg="gazebo_ros" type="spawn_model" args="-file $(find cv_ur5_project)/urdf/Table.urdf -urdf -model Table" />
  
  <!-- Load and spawn gripper controllers -->
  <rosparam file="$(find cv_ur5_project)/config/gripper_controller.yaml" command="load"/>
  <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="Slider1_effort_controller gripper_joint_state_controller"/>
  
  <!-- Publish gripper joint states to the appropriate topic -->
  <node name="gripper_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
    <remap from="/joint_states" to="/MockGripper/joint_states"/>
  </node>

  <!-- Load RQT GUI with preconfigured perspective (gui for manual control) -->
  <node pkg="rqt_gui"
  type="rqt_gui"
  name="rqt_gui"
  args="--perspective-file $(find cv_ur5_project)/cv_ur5_project.perspective"/>

  <!-- Load cube URDF as param and spawn in Gazebo -->
  <param name="cube" command="$(find xacro)/xacro $(find cv_ur5_project)/urdf/cube_pick_place.urdf"/>
  <arg name="x_c" default="1.35"/>
  <arg name="y_c" default="0.25"/>
  <arg name="z_c" default="1.32"/>
  <node name="spawn_cube" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param cube -model cube_pick_place -x $(arg x_c) -y $(arg y_c) -z $(arg z_c)" />

  <!-- Static transforms for robot base to world frame -->
  <node pkg="tf" type="static_transform_publisher" name="initial_base_pose_publisher"
      args="1.40000000054 0.700000036805 1.12250020065 0 0 0 /world /base 100" />
  <node pkg="tf" type="static_transform_publisher" name="initial_base_link_pose_publisher"
      args="1.40000000054 0.700000036805 1.12250020065 0 0 0 /world /base_link 100" />

  <!-- Optional RQT reconfigure panel for gripper control -->
  <node name="rqt_reconfigure" pkg="rqt_gui" type="rqt_gui" />
    
  <!-- Load viewer camera URDF and spawn it -->
  <param name="cam" command="$(find xacro)/xacro $(find cv_ur5_project)/urdf/viewer_cam.urdf"/>
  <node name="spawn_cam" pkg="gazebo_ros" type="spawn_model" output="screen" args="-urdf -param cam -model viewer_cam" />

  <!-- Static transform for viewer camera in world frame -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="viewer_cam_tf" args="2.4 .2 1.5 1.57 0 -1.57 world viewer_cam_link" />

  <!-- Launch RViz with predefined config -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find cv_ur5_project)/cv_ur5_project.rviz" />

  <!-- Start model state to TF bridge -->
  <node name="model_state_publisher" pkg="cv_ur5_project" type="model_state_tf_publisher.py" output="screen"/>

</launch>
